/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Information = {
	_id: string;
	_type: 'information';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	biography?: Array<
		{
			_key: string;
		} & InternationalizedArrayTextValue
	>;
	impressum?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: 'span';
			_key: string;
		}>;
		style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
		listItem?: 'bullet' | 'number';
		markDefs?: Array<{
			href?: string;
			_type: 'link';
			_key: string;
		}>;
		level?: number;
		_type: 'block';
		_key: string;
	}>;
};

export type Exhibitions = {
	_id: string;
	_type: 'exhibitions';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	type?: 'solo' | 'group';
	title?: string;
	slug?: Slug;
	startDate?: string;
	endDate?: string;
	venue?: {
		name?: string;
		city?: string;
		location?: Geopoint;
	};
	photos?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: Array<
			{
				_key: string;
			} & InternationalizedArrayStringValue
		>;
		caption?: Array<
			{
				_key: string;
			} & InternationalizedArrayStringValue
		>;
		_type: 'image';
		_key: string;
	}>;
	description?: Array<
		{
			_key: string;
		} & InternationalizedArrayTextValue
	>;
};

export type Work = {
	_id: string;
	_type: 'work';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	image?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	};
	title?: Array<
		{
			_key: string;
		} & InternationalizedArrayStringValue
	>;
	slug?: Slug;
	date?: string;
	medium?: {
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: 'medium';
	};
	size?: string;
	description?: Array<
		{
			_key: string;
		} & InternationalizedArrayTextValue
	>;
};

export type Series = {
	_id: string;
	_type: 'series';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: Array<
		{
			_key: string;
		} & InternationalizedArrayStringValue
	>;
	slug?: Slug;
	description?: Array<
		{
			_key: string;
		} & InternationalizedArrayTextValue
	>;
	order?: number;
	works?: Array<{
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: 'work';
	}>;
};

export type Medium = {
	_id: string;
	_type: 'medium';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: Array<
		{
			_key: string;
		} & InternationalizedArrayStringValue
	>;
};

export type InternationalizedArrayTextValue = {
	_type: 'internationalizedArrayTextValue';
	value?: string;
};

export type InternationalizedArrayStringValue = {
	_type: 'internationalizedArrayStringValue';
	value?: string;
};

export type InternationalizedArrayText = Array<
	{
		_key: string;
	} & InternationalizedArrayTextValue
>;

export type InternationalizedArrayString = Array<
	{
		_key: string;
	} & InternationalizedArrayStringValue
>;

export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch';
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: 'sanity.imagePalette';
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions';
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot';
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageCrop = {
	_type: 'sanity.imageCrop';
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityFileAsset = {
	_id: string;
	_type: 'sanity.fileAsset';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
	_id: string;
	_type: 'sanity.imageAsset';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata';
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Geopoint = {
	_type: 'geopoint';
	lat?: number;
	lng?: number;
	alt?: number;
};

export type Slug = {
	_type: 'slug';
	current?: string;
	source?: string;
};

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData';
	name?: string;
	id?: string;
	url?: string;
};

export type AllSanitySchemaTypes =
	| Information
	| Exhibitions
	| Work
	| Series
	| Medium
	| InternationalizedArrayTextValue
	| InternationalizedArrayStringValue
	| InternationalizedArrayText
	| InternationalizedArrayString
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityImageHotspot
	| SanityImageCrop
	| SanityFileAsset
	| SanityImageAsset
	| SanityImageMetadata
	| Geopoint
	| Slug
	| SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../app/src/lib/sanity/server.ts
// Variable: allSeriesQuery
// Query: *[_type == "series"] | order(order desc) {    slug,    "title": coalesce(      title[_key == $language][0].value,      title[_key == "de"][0].value,      "Missing translation"    ),    order,  }
export type AllSeriesQueryResult = Array<{
	slug: Slug | null;
	title: string | 'Missing translation';
	order: number | null;
}>;
// Variable: seriesBySlugQuery
// Query: *[_type == "series" && slug.current == $slug][0] {  "title": coalesce(    title[_key == $language][0].value,    title[_key == "de"][0].value,    "Missing translation"  ),  year,  slug,  description,  works[]-> {    slug,    "title": coalesce(      title[_key == $language][0].value,      title[_key == "de"][0].value,      "Missing translation"    ),    image {      ...,      asset->{        ...,        metadata{          blurHash,          dimensions        }      }    },    date,    size,    description,    medium-> {      "name": coalesce(        name[_key == $language][0].value,        name[_key == "de"][0].value,        "Missing translation"      ),    }  }}
export type SeriesBySlugQueryResult = {
	title: string | 'Missing translation';
	year: null;
	slug: Slug | null;
	description: Array<
		{
			_key: string;
		} & InternationalizedArrayTextValue
	> | null;
	works: Array<{
		slug: Slug | null;
		title: string | 'Missing translation';
		image: {
			asset: {
				_id: string;
				_type: 'sanity.imageAsset';
				_createdAt: string;
				_updatedAt: string;
				_rev: string;
				originalFilename?: string;
				label?: string;
				title?: string;
				description?: string;
				altText?: string;
				sha1hash?: string;
				extension?: string;
				mimeType?: string;
				size?: number;
				assetId?: string;
				uploadId?: string;
				path?: string;
				url?: string;
				metadata: {
					blurHash: string | null;
					dimensions: SanityImageDimensions | null;
				} | null;
				source?: SanityAssetSourceData;
			} | null;
			media?: unknown;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			_type: 'image';
		} | null;
		date: string | null;
		size: string | null;
		description: Array<
			{
				_key: string;
			} & InternationalizedArrayTextValue
		> | null;
		medium: {
			name: string | 'Missing translation';
		} | null;
	}> | null;
} | null;
// Variable: informationQuery
// Query: *[_type == "information"][0] {  _id,  _type,  "biography": coalesce(    biography[_key == $language][0].value,    biography[_key == "de"][0].value,    "Missing translation"  ),  impressum}
export type InformationQueryResult = {
	_id: string;
	_type: 'information';
	biography: string | 'Missing translation';
	impressum: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: 'span';
			_key: string;
		}>;
		style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
		listItem?: 'bullet' | 'number';
		markDefs?: Array<{
			href?: string;
			_type: 'link';
			_key: string;
		}>;
		level?: number;
		_type: 'block';
		_key: string;
	}> | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
	interface SanityQueries {
		'\n  *[_type == "series"] | order(order desc) {\n    slug,\n    "title": coalesce(\n      title[_key == $language][0].value,\n      title[_key == "de"][0].value,\n      "Missing translation"\n    ),\n    order,\n  }\n': AllSeriesQueryResult;
		'\n*[_type == "series" && slug.current == $slug][0] {\n  "title": coalesce(\n    title[_key == $language][0].value,\n    title[_key == "de"][0].value,\n    "Missing translation"\n  ),\n  year,\n  slug,\n  description,\n  works[]-> {\n    slug,\n    "title": coalesce(\n      title[_key == $language][0].value,\n      title[_key == "de"][0].value,\n      "Missing translation"\n    ),\n    image {\n      ...,\n      asset->{\n        ...,\n        metadata{\n          blurHash,\n          dimensions\n        }\n      }\n    },\n    date,\n    size,\n    description,\n    medium-> {\n      "name": coalesce(\n        name[_key == $language][0].value,\n        name[_key == "de"][0].value,\n        "Missing translation"\n      ),\n    }\n  }\n}\n': SeriesBySlugQueryResult;
		'\n*[_type == "information"][0] {\n  _id,\n  _type,\n  "biography": coalesce(\n    biography[_key == $language][0].value,\n    biography[_key == "de"][0].value,\n    "Missing translation"\n  ),\n  impressum\n}\n': InformationQueryResult;
	}
}
